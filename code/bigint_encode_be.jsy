
export default encodeIntoBigIntBE
export function encodeIntoBigIntBE(value, u8buf, as_tiled) ::
  if undefined === u8buf ::
    u8buf = new Uint8Array(1024)

  const len = u8buf.length
  let i=len, v_next=value, v_tip
  while i>0 && v_next!==v_tip ::
    v_tip = v_next
    v_next = v_next >> 8n
    u8buf[--i] = Number @ v_tip & 0xffn
    
  if i<len-1 ::
    const v = u8buf[i], sp = 0x80 & u8buf[i+1]
    if 0x00 === v && ! sp :: i += 1
    else if 0xff === v && sp :: i += 1

  const u8res = u8buf.slice(i)

  if as_tiled ::
    return [v_next==v_tip, v_next, u8res]

  else if v_next == v_tip ::
    return u8res

  else throw new Error @ 'Insuffecient buffer size to encode BigInt value'



export function encodeIntoBigUintBE(value, u8buf, as_tiled) ::
  if value < 0n :: throw new Error @ "Invalid negative BigInt value"

  if undefined === u8buf ::
    u8buf = new Uint8Array(1024)

  const len = u8buf.length
  let i=len, v_next=value, v_tip
  while i>0 && v_next!==v_tip ::
    v_tip = v_next
    v_next = v_next >> 8n
    u8buf[--i] = Number @ v_tip & 0xffn
    
  if i<len-1 ::
    const v = u8buf[i]
    if 0x00 === v :: i += 1

  const u8res = u8buf.slice(i)

  if as_tiled ::
    return [v_next==v_tip, v_next, u8res]

  else if v_next == v_tip ::
    return u8res

  else throw new Error @ 'Insuffecient buffer size to encode BigInt value'

