
export default encodeIntoBigIntBE
export const encodeIntoBigIntBE = _encodeIntoBigIntBE.bind @ null, true
export const encodeIntoBigUintBE = _encodeIntoBigIntBE.bind @ null, false

export function _encodeIntoBigIntBE(as_signed, value, u8buf) ::
  if undefined === u8buf ::
    u8buf = new Uint8Array(128)

  const len = u8buf.length
  let i=len, v_next=value, v_tip
  while i>0 && v_next!==v_tip ::
    v_tip = v_next
    v_next = v_next >> 8n
    u8buf[--i] = Number @ v_tip & 0xffn
    
  if v_next!==v_tip ::
    throw new Error @ 'Insuffecient buffer size to encode unsigned BigInt value'

  if i<len-1 ::
    const v = u8buf[i]
    const sp = as_signed && (0x80 & u8buf[i+1])
    if 0x00 === v && ! sp :: i += 1
    else if 0xff === v && sp :: i += 1

  const u8res = u8buf.slice(i)
  return u8res

