export default encodeIntoBigIntLE
export const encodeIntoBigIntLE = _encodeIntoBigIntLE.bind(null, true)
export const encodeIntoBigUintLE = _encodeIntoBigIntLE.bind(null, false)

export function _encodeIntoBigIntLE(as_signed, value, u8buf) ::
  if undefined === u8buf ::
    u8buf = new Uint8Array(128)

  const max_i = u8buf.length-1
  let i=-1, v_next=value, v_tip
  while i<max_i && v_next!==v_tip ::
    v_tip = v_next
    v_next = v_next >> 8n
    u8buf[++i] = Number @ v_tip & 0xffn

  if v_next!==v_tip ::
    throw new Error @ 'Insuffecient buffer size to encode unsigned BigInt value'

  if i>0 ::
    const v = u8buf[i]
    const sp = as_signed && (0x80 & u8buf[i-1])
    if 0x00 === v && ! sp :: i -= 1
    else if 0xff === v && sp :: i -= 1

  const u8res = u8buf.slice(0, i+1)
  return u8res

