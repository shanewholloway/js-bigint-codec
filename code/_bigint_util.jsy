export function _as_u8_data(u8buf) ::
  if u8buf instanceof Uint8Array ::
    return u8buf

  if u8buf instanceof ArrayBuffer ::
    return new Uint8Array(u8buf)

  const {buffer, byteOffset, byteLength} = u8buf
  if undefined !== buffer ::
    return new Uint8Array(buffer, byteOffset, byteLength)

  throw new Error @ 'Unexpected buffer kind'

export function _u8buf_for_bigint(v) ::
  if 0n > v ::
    v = -v

  // rough size estimate
  let size = 32
  let alloc = 2n ** BigInt(size)
  while alloc <= v ::
    alloc <<= 256n
    size += 32

  return new Uint8Array(size)

